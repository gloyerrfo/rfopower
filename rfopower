#!/usr/bin/env python3
"""
rfopower.py
    This python program interfaces a Raspberry pi to an
    EKM Omnimeter 1v.3.  The interface is from the Pi USB
    port to the Omnimeter RS485 via a USB-RS485 converter
    from EKM. The EKM communication protocol over this
    interface is a two-wire duplex mode and requires
    something like an FTDI serial interface chip to handle
    the duplex send and receive without collisions.
"""

import os                       # for process id and PID file
import urllib                   # for checking that internet access is available
import time                     # for delay and datetime stamp in log
from Adafruit_IO import Client, Feed, Data, RequestError  # for REST client to send data to adafruit.io
from ekmmeters import *         # ekmmeters python library for talking to omnimeter
import json                     # for json string parsing

# Setup static variables
ADAFRUIT_IO_USERNAME = 'georgel1'
ADAFRUIT_IO_KEY = 'bf5ae028f12029bee60d467afe56674c92e1b08d'
RFO_PID = '/run/rfopower.pid'
RFO_LOG = '/home/pi/Projects/ekm/rfopower.log'

# create a REST client for adafruit.io
# first argument is username, second argument is adafruit.io key
aio = Client(ADAFRUIT_IO_USERNAME, ADAFRUIT_IO_KEY)
aiofaillimit = 5
aiofails = 0

def rfo_print_log(log_string):
    """
    print log strings to a standard log file
    """
    try:
        with open(RFO_LOG, "a") as logfile:                         # append only to the file
            logfile.write(time.strftime("%Y-%m-%d %H:%M:%S"))       # print the timestamp
            logfile.write(" ")
            logfile.write("[")                                      # print the process pid in square brackets
            logfile.write(str(os.getpid()))
            logfile.write("] ")
            logfile.write(log_string)                               # print the string to the log file
            logfile.write("\n")                                     # print a newline
    except IOError as e:                                            # catch IO errors
        print ("Error opening log file")                            # must write errors to STDOUT
        print (e)
    return                                                          # allow all other errors to crash

def wait_for_internet():
    """
    waiting for access to the internet
    """
    while True:
        try:
            response = urllib.request.urlopen('http://www.google.com', data=None, timeout=2)
            return
        except urllib.error.URLError as e:
            rfo_print_log(str(e.reason))
            time.sleep(8)
            pass

# reporting the start of the app in the log
rfo_print_log("STARTING RFOPOWER")

# write the process id in rfopower.pid for systemd forking
try:
   with open(RFO_PID, "w+") as pidfile:                             # write or create pidfile
        pidfile.write(str(os.getpid()))
        rfo_print_log("Wrote pid to pidfile")
except IOError as e:                                                # catch IO errors
    rfo_print_log(e)
except:
    rfo_print_log("Unknown error occurred writing to pid file.")

rfo_print_log("Waiting for internet on startup...")
wait_for_internet()
rfo_print_log("Internet connection is live.")

# setup feeds
try:
    rfo_kwh = aio.feeds('rfo-kwh')                                  # check for feed name
except RequestError:
    feed = Feed(name="rfo-kwh")                                     # on RequestError, create feed
    rfo_kwh = aio.create_feed(feed)                                 # what exceptions from Feed and aio.create_feed()?
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_rms_volts_ln_1 = aio.feeds('rfo-rms-volts-ln-1')
except RequestError:
    feed = Feed(name="rfo-rms-volts-ln-1")
    rfo_rms_volts_ln_1 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_rms_volts_ln_2 = aio.feeds('rfo-rms-volts-ln-2')
except RequestError:
    feed = Feed(name="rfo-rms-volts-ln-2")
    rfo_rms_volts_ln_2 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_amps_ln_1 = aio.feeds('rfo-amps-ln-1')
except RequestError:
    feed = Feed(name="rfo-amps-ln-1")
    rfo_amps_ln_1 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_amps_ln_2 = aio.feeds('rfo-amps-ln-2')
except RequestError:
    feed = Feed(name="rfo-amps-ln-2")
    rfo_amps_ln_2 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_rms_watts_ln_1 = aio.feeds('rfo-rms-watts-ln-1')
except RequestError:
    feed = Feed(name="rfo-rms-watts-ln-1")
    rfo_rms_watts_ln_1 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

try:
    rfo_rms_watts_ln_2 = aio.feeds('rfo-rms-watts-ln-2')
except RequestError:
    feed = Feed(name="rfo-rms-watts-ln-2")
    rfo_rms_watts_ln_2 = aio.create_feed(feed)
except:
    rfo_print_log("Unknown error from aio.feeds")

my_port_name = "/dev/ttyUSB0"
# run lsusb -t to find USB ports, ls /dev/tty* to find device name

my_meter_address = "000000032943"                       # serial number printed on the meter

ekm_set_log(rfo_print_log)                              # set up log function for ekm debug output
port = SerialPort(my_port_name)

# open the RS485 port to the Omnimeter
if (port.initPort() == True):                           # need better error recovery approach
    my_meter = V3Meter(my_meter_address)
    my_meter.attachPort(port)
else:
    rfo_print_log("Cannot open port to Omnimeter")
    exit(1)

# a new Omnimeter defaults to 200A for CT, that's what we use
if my_meter.request():                                  # what errors can ekm.request() throw?
    ct_str = my_meter.getField(Field.CT_Ratio)          # what errors can ekm.getField() throw?
    # rfo_print_log ("DEBUG: CT is " + ct_str)          # debug
    if (ct_str != "200"):
        if my_meter.setCTRatio(CTRatio.Amps_200, password='00000000'):  # what errors from ekm.setCTRatio()?
            rfo_print_log ("Successfully set CTRatio to 200")     # debug
        else:
            rfo_print_log ("NONFATAL ERROR: CT is still %s. Failed to update to 200." %  (ct_str))

# LOOP
# main read and report loop
while True:
    if my_meter.request():                              # handle the request exceptions
        my_read_buffer = my_meter.getReadBuffer()
        json_str = my_meter.jsonRender(my_read_buffer)
        # rfo_print_log (json_str)          # debug print statement
        rfo_field = json.loads(json_str)        # convert json string to dictionary
        # rfo_print_log ("DEBUG: kWh Total: ", float(rfo_field["kWh_Tot"]))        # debug
        # rfo_print_log ("DEBUG: Amps Line 1: ", float(rfo_field["Amps_Ln_1"]))      # debug
        # rfo_print_log ("DEBUG: RMS Volts Line 1: ", float(rfo_field["RMS_Volts_Ln_1"]))        # debug

    	# Send to an adafruit.io feed a numeric value for each data element
        try:
            aio.send_data(rfo_kwh.key, float(rfo_field["kWh_Tot"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")
            aiofails += 1                                   # increment the error counter once per cycle

        try:
            aio.send_data(rfo_rms_volts_ln_1.key, float(rfo_field["RMS_Volts_Ln_1"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        try:
            aio.send_data(rfo_amps_ln_1.key, float(rfo_field["Amps_Ln_1"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        try:
            aio.send_data(rfo_rms_watts_ln_1.key, float(rfo_field["RMS_Watts_Ln_1"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        try:
            aio.send_data(rfo_rms_volts_ln_2.key, float(rfo_field["RMS_Volts_Ln_2"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        try:
            aio.send_data(rfo_amps_ln_2.key, float(rfo_field["Amps_Ln_2"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        try:
            aio.send_data(rfo_rms_watts_ln_2.key, float(rfo_field["RMS_Watts_Ln_2"]))
        except RequestError as e:
            rfo_print_log(e)
        except:
            rfo_print_log("Unknown error from aio.send()")

        rfo_print_log (rfo_field["Meter_Time"])
        if aiofails >= aiofaillimit:
            rfo_print_log("AIO failures exceeded the limit - waiting for internet service to be restored.")
            wait_for_internet()
            aiofails = 0
            rfo_print_log("Internet back up, resuming.")
        time.sleep(60)

port.closePort()
